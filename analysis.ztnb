import zero_true as zt
import requests
import pandas as pd
import plotly.express as px
def fetch_driver_data(driver_number, session_key, speed_threshold=315):
    url = f'https://api.openf1.org/v1/car_data?driver_number={driver_number}&session_key={session_key}&speed>={speed_threshold}'
    try:
        response = requests.get(url)
        response.raise_for_status()  
        data = response.json()

        if isinstance(data, list) and len(data) > 0:
            return pd.DataFrame(data)  
        else:
            print(f"No valid data found for driver number: {driver_number}")
            return None
    except Exception as e:
        print("Error fetching data:", e)
        return None
drivers = {
    'Max Verstappen': 33,
    'Sergio Perez': 11,
    'Lewis Hamilton': 44
}
sessions = ['FP1', 'FP2', 'FP3', 'Qualifying', 'Race']
def create_visuals(driver_data, driver_name, session):
    driver_data['date'] = pd.to_datetime(driver_data['date'])
    fig_speed = px.line(driver_data, x='date', y='speed',
                        title=f'Speed over Time for {driver_name} in {session}',
                        labels={'speed': 'Speed (km/h)', 'date': 'Time'},
                        line_shape='linear')
    
    fig_rpm = px.line(driver_data, x='date', y='rpm',
                      title=f'RPM over Time for {driver_name} in {session}',
                      labels={'rpm': 'Engine RPM', 'date': 'Time'},
                      line_shape='linear')
    zt.render(fig_speed)
    zt.render(fig_rpm)
def analyze_driver_data(driver_name, session):
    driver_number = drivers[driver_name]
    session_key = session  
    driver_data = fetch_driver_data(driver_number, session_key)
    if driver_data is not None and not driver_data.empty:
        create_visuals(driver_data, driver_name, session)
        print(f"Displaying data and analysis for {driver_name} in {session}")
        stats = driver_data.describe()
        print(f"Key Statistics for {driver_name} in {session}:\n{stats}")
    else:
        print(f"No valid data found for {driver_name} in {session}.")
selected_driver = 'Max Verstappen' 
selected_session = 'Race'  
analyze_driver_data(selected_driver, selected_session)
